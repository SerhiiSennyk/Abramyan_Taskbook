#include <iostream>

using namespace std;

bool Boolean1(int a) {
	/*Дано целое число A.Проверить истинность высказывания: «Число A является положительным»*/
	return a > 0;
}

bool Boolean2(int a) {
	/*Дано целое число A. Проверить истинность высказывания: «Число A является нечетным».*/
	return a % 2;
}

bool Boolean3(int a) {
	/*Дано целое число A. Проверить истинность высказывания: «Число A является четным».*/
	return (a % 2) == 0;
}

bool Boolean4(int a, int b) {
	/*Даны два целых числа: A, B. Проверить истинность высказывания:
	«Справедливы неравенства A > 2 и B ≤ 3»*/
	return (a > 2) && (b <= 3);
}

bool Boolean5(int a, int b) {
	/*Даны два целых числа: A, B. Проверить истинность высказывания:
	«Справедливы неравенства A ≥ 0 или B < −2».*/
	return (a >= 0) && (b < -2);
}

bool Boolean6(int a, int b, int c) {
	/*Даны три целых числа: A, B, C. Проверить истинность высказывания: 
	«Справедливо двойное неравенство A < B < C».*/
	return (a < b) && (b < c);
}

bool Boolean7(int a, int b, int c) {
	/*Даны три целых числа: A, B, C. Проверить истинность высказывания: 
	«Число B находится между числами A и C»*/
	return ((a - b) * (b - c)) > 0;
}

bool Boolean8(int a, int b) {
	/* Даны два целых числа: A, B. Проверить истинность высказывания:
	«Каждое из чисел A и B нечетное».*/
	return (a * b) % 2;
}

bool Boolean9(int a, int b) {
	/*Даны два целых числа: A, B. Проверить истинность высказывания:
	«Хотя бы одно из чисел A и B нечетное».*/
	return ((a % 2) != 0) || ((b % 2) != 0);
}

bool Boolean10(int a, int b) {
	/* Даны два целых числа: A, B. Проверить истинность высказывания: 
	«Ровно одно из чисел A и B нечетное».*/
	return (a + b) % 2;
}

bool Boolean11(int a, int b) {
	/*Даны два целых числа: A, B. Проверить истинность высказывания: 
	«Числа A и B имеют одинаковую четность».*/
	return ((a + b) % 2) == 0;
}

bool Boolean12(int a, int b, int c) {
	/*Даны три целых числа: A, B, C. Проверить истинность высказывания: 
	«Каждое из чисел A, B, C положительное».*/
	return (a > 0) && (b > 0) && (c > 0);
}

bool Boolean13(int a, int b, int c) {
	/*Даны три целых числа: A, B, C. Проверить истинность высказывания: 
	«Хотя бы одно из чисел A, B, C положительное».*/
	(a > 0) || (b > 0) || (c > 0);
}

bool Boolean14(int a, int b, int c) {
	/*Даны три целых числа: A, B, C. Проверить истинность высказывания: 
	«Ровно одно из чисел A, B, C положительное».*/
	return ((a > 0) ^ (b > 0)) ^ (c > 0);
}

bool Boolean15(int a, int b, int c) {
	/*Даны три целых числа: A, B, C. Проверить истинность высказывания: 
	«Ровно два из чисел A, B, C являются положительными».*/
	return ((a > 0) && (b > 0)) ^ (c >= 0) ||
		((c > 0) && (b > 0)) ^ (a >= 0) || 
		((a > 0) && (c > 0)) ^ (b >= 0);
}

bool Boolean16(int a) {
	/*Дано целое положительное число. Проверить истинность высказывания: 
	«Данное число является четным двузначным».*/
	return ((a % 2) == 0) && (a > 9) && (a < 100);
}

bool Boolean17(int a) {
	/*Дано целое положительное число. Проверить истинность высказывания: 
	«Данное число является нечетным трехзначным».*/
	return ((a % 2) != 0) && (a > 99) && (a < 1000);
}

bool Boolean18(int a, int b, int c) {
	/*Проверить истинность высказывания: «Среди трех данных целых
	чисел есть хотя бы одна пара совпадающих».*/
	return a == b || a == c || b == c;
}

bool Boolean19(int a, int b, int c) {
	/*Проверить истинность высказывания: «Среди трех данных целых
	чисел есть хотя бы одна пара взаимно противоположных».*/
	return ((a + b) == 0) || ((a + c) == 0) || ((b + c) == 0);
}

bool Boolean20(int a) {
	/*Дано трехзначное число. Проверить истинность высказывания:
	«Все цифры данного числа различны».*/
	int hundreds = a / 100;
	int dozens = (a % 100) / 10;
	int units = (a % 10);
	return (hundreds != dozens) && (dozens != units) && (hundreds != units);
}

bool Boolean21(int a) {
	/* Дано трехзначное число. Проверить истинность высказывания:
	«Цифры данного числа образуют возрастающую последовательность».*/
	int hundreds = a / 100;
	int dozens = (a % 100) / 10;
	int units = (a % 10);
	return (hundreds < dozens) && (dozens < units);
}

bool Boolean22(int a) {
	/*Дано трехзначное число. Проверить истинность высказывания:
	«Цифры данного числа образуют возрастающую или убывающую последовательность».*/
	int hundreds = a / 100;
	int dozens = (a % 100) / 10;
	int units = (a % 10);
	return ((hundreds < dozens) && (dozens < units)) || ((hundreds > dozens) && (dozens > units));
}

bool Boolean23(int a) {
	/*Дано четырехзначное число. Проверить истинность высказывания: 
	«Данное число читается одинаково слева направо и справа налево».*/
	int thousands = a / 1000;
	int hundreds = (a % 1000) / 100;
	int dozens = (a % 100) / 10;
	int units = (a % 10);
	return (thousands == units) && (hundreds == dozens);
}

bool Boolean24(int a, int b, int c) {
	/*Даны числа A, B, C (число A не равно 0). Рассмотрев дискриминант D = B
	2 − 4·A·C, проверить истинность высказывания: «Квадратное
	уравнение A·x^2 + B·x + C = 0 имеет вещественные корни».*/
	int d = b*b - 4 * a * c;
	return d >= 0;
}

bool Boolean25(int x, int y) {
	/*Даны числа x, y. Проверить истинность высказывания: «Точка с
	координатами (x, y) лежит во второй координатной четверти».*/
	return (x < 0) && (y > 0);
}

bool Boolean26(int x, int y) {
	/*Даны числа x, y. Проверить истинность высказывания: «Точка с
	координатами (x, y) лежит в четвертой координатной четверти».*/
	return (x > 0) && (y < 0);
}

bool Boolean27(int x, int y) {
	/*Даны числа x, y. Проверить истинность высказывания: «Точка с
	координатами (x, y) лежит во второй или третьей координатной четверти».*/
	return x < 0;
}

bool Boolean28(int x, int y) {
	/*Даны числа x, y. Проверить истинность высказывания: «Точка с
	координатами (x, y) лежит в первой или третьей координатной четверти».*/
	return (x * y) > 0;
}

bool Boolean29(int x, int y, int x1, int y1, int x2, int y2) {
	/*Даны числа x, y, x1, y1, x2, y2. Проверить истинность высказывания: 
	«Точка с координатами (x, y) лежит внутри прямоугольника, левая
	верхняя вершина которого имеет координаты (x1, y1), правая нижняя —
	(x2, y2), а стороны параллельны координатным осям».*/
	return ((x > x1) && (x < x2)) && ((y > y1) && (y > y2));
}

bool Boolean30(int a, int b, int c) {
	/*Даны целые числа a, b, c, являющиеся сторонами некоторого треугольника. 
	Проверить истинность высказывания: 
	«Треугольник со сторонами a, b, c является равносторонним».*/
	return (a == b) && (b == c);
}

bool Boolean31(int a, int b, int c) {
	/*Даны целые числа a, b, c, являющиеся сторонами некоторого треугольника. 
	Проверить истинность высказывания: 
	«Треугольник со сторонами a, b, c является равнобедренным».*/
	return (a == b) || (a == c) || (b == c);
}

bool Boolean32(int a, int b, int c) {
	/* Даны целые числа a, b, c, являющиеся сторонами некоторого треугольника. 
	Проверить истинность высказывания: 
	«Треугольник со сторонами a, b, c является прямоугольным».*/
	return (a*a == b*b + c*c) || (b*b == a*a + c*c) || (c*c == a*a + b*b);
}

bool Boolean33(int a, int b, int c) {
	/*Даны целые числа a, b, c. Проверить истинность высказывания:
	«Существует треугольник со сторонами a, b, c».*/
	return (a < (b + c)) && (b < (a + c)) && (c < (a + b));
}

bool Boolean34(int x, int y) {
	/*Даны координаты поля шахматной доски x, y (целые числа, лежащие в диапазоне 1–8). 
	Учитывая, что левое нижнее поле доски (1, 1) является черным, проверить истинность 	высказывания:«Данное поле является белым».*/
	return ((x + y) != 0);
}

bool Boolean35(int x1, int y1, int x2, int y2) {
	/*Даны координаты двух различных полей шахматной доски x1,
	y1, x2, y2 (целые числа, лежащие в диапазоне 1–8). Проверить истинность
	высказывания: «Данные поля имеют одинаковый цвет».*/
	return (x1 + y1) == (x2 + y2);
}

bool Boolean36(int x1, int y1, int x2, int y2) {
	/*Даны координаты двух различных полей шахматной доски x1, y1,
	x2, y2 (целые числа, лежащие в диапазоне 1–8). Проверить истинность высказывания: 
	«Ладья за один ход может перейти с одного поля на другое».*/
	return (x1 == x2) || (y1 == y2);
}

bool Boolean37(int x1, int y1, int x2, int y2) {
	/* Даны координаты двух различных полей шахматной доски x1 y1, x2, y2 (целые числа, лежащие в диапазоне 1–8).
	Проверить истинность высказывания: «Король за один ход может перейти с одного поля на другое».*/
	return (abs(x1 - x2) < 2) && (abs(y1 - y2) < 2);
}

bool Boolean38(int x1, int y1, int x2, int y2) {
	/*Даны координаты двух различных полей шахматной доски x1,
	y1, x2, y2 (целые числа, лежащие в диапазоне 1–8). Проверить истинность
	высказывания: «Слон за один ход может перейти с одного поля на другое».*/
	return abs(x1 - x2) == abs(y1 - y2);
}

bool Boolean39(int x1, int y1, int x2, int y2) {
	/*Даны координаты двух различных полей шахматной доски x1, y1,
	x2, y2 (целые числа, лежащие в диапазоне 1–8). Проверить истинность высказывания: 
	«Ферзь за один ход может перейти с одного поля на другое».*/
	return (abs(x1 - x2) == abs(y1 - y2)) || (x1 == x2) || (y1 == y2);
}

bool Boolean40(int x1, int y1, int x2, int y2) {
	/*Даны координаты двух различных полей шахматной доски x1,
	y1, x2, y2 (целые числа, лежащие в диапазоне 1–8). Проверить истинность
	высказывания: «Конь за один ход может перейти с одного поля на другое».*/
	return (((x1 - 2) == x2) || ((x1 + 2) == x2) && ((y1 - 1) == y2) || ((y1 + 1) == y2))
		|| (((y1 + 2) == y2) || ((y1 - 2) == y2) && ((x1 - 1) == x2) || ((x1 + 1) == x2));
}